{"version":3,"sources":["components/Form.jsx","container/App.js","serviceWorker.js","index.js"],"names":["ImageUpload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","image","imagePreviewUrl","blog","_handleImageChange","bind","assertThisInitialized","_handleSubmit","event","_this2","preventDefault","file","target","files","fileReader","FileReader","onloadend","setState","result","readAsDataURL","console","log","value","e","_this3","formData","FormData","append","fetch","method","body","then","response","json","_this4","$imagePreview","react_default","a","createElement","src","alt","className","onSubmit","id","type","onChange","name","handleBlogChange","placeholder","Component","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.346cd2ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './form.css';\n\n\nclass ImageUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        image: '',\n        imagePreviewUrl: null,\n        blog: ''\n    };\n    this._handleImageChange= this._handleImageChange.bind(this)\n    this._handleSubmit= this._handleSubmit.bind(this)\n  }\n\n     _handleImageChange(event) {\n\n        event.preventDefault();\n        let file = event.target.files[0];\n        let fileReader = new FileReader();\n        fileReader.onloadend = () => this.setState({imagePreviewUrl: fileReader.result});\n        fileReader.readAsDataURL(file);\n        this.setState({image: file});\n        console.log(\"image\", this.state.image)\n\n    }\n    handleBlogChange(event){\n      event.preventDefault();\n      this.setState({blog: event.target.value})\n    }\n\n\n     _handleSubmit(e) {\n        e.preventDefault();\n        console.log('handle uploading-', this.state.image);\n\n        let formData = new FormData();\n        formData.append(\"image\", this.state.image);\n        formData.append(\"blog\", this.state.blog);\n\n\n        const conf = {\n            method: \"POST\",\n            body: formData,\n\n        };\n\n\n        fetch('/api/images/', conf).then((response) => {\n            return response.json();\n            // console.log(\"working\", JSON);\n        }).then((json) => {\n\n            this.setState({imagePreviewUrl: json});\n            console.log(\"working\", json);\n\n            console.log('post worked', );\n        });\n    };\n\n  render() {\n    let {imagePreviewUrl} = this.state;\n    let $imagePreview = null;\n    if (imagePreviewUrl) {\n      $imagePreview = (<img src={imagePreviewUrl} alt=\"imagePreview\"/>);\n    } else {\n      $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\n    }\n\n    return (\n        <form onSubmit={this._handleSubmit} id=\"uploadForm\">\n            <div>\n                <input className=\"fileInput\"\n                type=\"file\"\n                onChange={(e)=>this._handleImageChange(e)} /><br/>\n            </div>\n            <div id='textAndButton'>\n                <input id=\"blogText\" name=\"blog\" type='text' onChange={(e)=>this.handleBlogChange(e)} placeholder=\"Trip details\"/><br/>\n                <button className=\"submitButton\"\n                type=\"submit\">Upload Image</button>\n            </div>\n            <div className=\"imgPreview\">\n                {$imagePreview}\n            </div>\n            <div>\n                <p>{this.state.blog}</p>\n            </div>\n        </form>\n    )\n  }\n}\n\nexport default ImageUpload;\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport ImageUpload from '../components/Form'\n\nclass App extends Component {\n\n  render() {\n    return (\n        <div className=\"App\">\n          <ImageUpload/>\n        </div>\n    );\n\n  }\n\n}\n\nexport default App;\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}